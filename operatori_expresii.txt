/* Lab6_Popa_Larisa-Ancuta_Prob_1

-valoarea polinomului de gradul 3 pentru o anumita valoare reala

Program C
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <cmath>

float cit_nr(void); //citire valori
float polinom(float x, float a, float b, float c, float d); //calculul polinomului

int main()
{
	float x, p, a, b, c, d;
	printf("Introduceti valoarea lui x\n");
	x = cit_nr();
	printf("\nIntroduceti valorile coeficientilor\n");
	a = cit_nr();
	b = cit_nr();
	c = cit_nr();
	d = cit_nr();

	p = polinom(x, a, b, c, d);
	printf("\nValoarea polinomului este %f.\n", p);

	return 0;
}

float cit_nr(void)
{
	float x;
	printf("Introduceti o valoare reala: ");
	scanf("%f", &x);
	return x;
}

float  polinom(float x, float a, float b, float c,float d)
{
	return a*pow(x, 3) + b*pow(x, 2) + c*x + d;
}

------------------------------

/* Lab6_Popa_Larisa-Ancuta-Prob_2

-citeste lungimile laturilor unui triunghi (variabile întregi)
-afiseaza aria triunghiului ca valoare reala

Program C
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>

int cit_lat(void); //citire valoare latura
bool verif_lat(int x, int y, int z); //conditii existenta triunghi
float aria(int x, int y, int z); //calculul ariei

int main()
{
	int a, b, c; //laturile triunghiului
	printf("Introduceti valorile laturilor\n");
	a = cit_lat();
	b = cit_lat();
	c = cit_lat();

	float A;
	if (verif_lat(a, b, c))
	{
		A = aria(a, b, c);
		printf("Aria triunghiului este %f \n", A);
	}
	else
		printf("Cele trei valori nu pot sa fie laturile unui triunghi.\n");
}

int cit_lat(void)
{
	int x;
	printf("Introduceti o valoare intreaga: ");
	scanf("%d", &x);
	return x;
}

bool verif_lat(int x, int y, int z)
{
	if (x > 0 && y > 0 && z > 0)
	{
		if (x + y > z && y + z > x && x + z > y)
			return true;
	}
	return false;
}

float aria(int x, int y, int z)
{
	int p = (x + y + z) / 2;
	float a = p*(p - x)*(p - y)*(p - z);
	return sqrt(a);
}

------------------------------

/* Lab6_Popa_Larisa-Ancuta_Prob_3

-afiseaza valorile bitilor unei variabile de tip unsigned char aplicând succesiv operatorul de deplasare dreapta si operatorul %

Program C++
*/

#include<iostream>
using namespace std;

void afisare(unsigned char x); //afisarea bitilor unei variabile

int main()
{
	unsigned char c = '\023';
	afisare(c);

	return 0;
}

void afisare(unsigned char x)
{
	int i = 0;
	while (i < sizeof(x) * 8)
	{
		int bit = x % 2;
		cout << "Pozitia " << i + 1 << ": Valoare bit: " << bit << "\n";
		x = x >> 1; //deplasare la dreapta cu un bit
		i++;
	}
}



------------------------------

/* Lab6_Popa_Larisa-Ancuta_Prob_4

-sa se scrie un program care monitorizeaza un canal de 16/32/64 biti
-cititi de la tastatura o valoare întrega fara semn a care va fi afisata în zecimal, binar, octal si hexazecimal
-Folositi o functie pentru conversia numerelor din baza 10 în baza 2

-implementati o alta functie numita getsets() care primeste trei valori ca parametri:
      x: valoarea citita de la tastatura
      p: pozitia unui bit din cei 16/32 sau 64 de biti (numarând de la dreapta)
      n: numarul de biti care vor fi extrasi din tabel.
-Functia returneaza, aranjati spre dreapta, acei n biti ai valorii x, pornind de la pozitia p, unde p<8*sizeof(x) si p>n
-afisati rezultatul în binar, octal si hexazecimal.

Program C
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void baza_2(int x); //transformare din baza 10 in baza 2
void getsets(int x, int p, int n);

int main()
{
	int x, p, n;
	printf("Introduceti o valoare intreaga: ");
	scanf("%d", &x);

	printf("Introduceti pozitia bitului: ");
	scanf("%d", &p);

	printf("Introduceti numarul de biti extrasi din tabel:  ");
	scanf("%d", &n);

	printf("\nValoarea in zecimal a numarului %d este %d \n", x, x);
	baza_2(x);
	printf("Valoarea in octal a numarului %d este %o \n", x, x);
	printf("Valoarea in hexazecimal a numarului %d este %x \n", x, x);

	printf("\nAfisare dupa apelarea functiei date (getsets).\n");
	getsets(x, p, n);

	return 0;
}

void baza_2(int x)
{
	int conversie = 0, p = 1, r, copie = x;

	while (copie != 0)
	{
		r = copie % 2;
		conversie += (r*p);
		p *= 10;
		copie /= 2;
	}

	printf("Valoarea in baza 2 a numarului %d este %d \n", x, conversie);
}

void getsets(int x, int p, int n)
{
	int val = x >> (p + 1 - n)&(~(~0 << n));
	baza_2(val);
	printf("Valoarea in octal a numarului %d este %o \n", x, val);
	printf("Valoarea in hexazecimal a numarului %d este %x \n", x, val);
}

------------------------------

/* Lab6_Popa_Larisa-Ancuta_Prob_5

-citeste de la intrarea standard un numar întreg
-afiseaza numarul de zerouri din reprezentarea sa binara

Program C++
*/

#include<iostream>
using namespace std;

void nr_zerouri(int x); // afiseaza numarul de zerouri din reprezentarea binara

int main()
{
	int x;
	cout << "Introduceti un numar intreg: ";
	cin >> x;

	nr_zerouri(x);

	return 0;
}

void nr_zerouri(int x)
{
	int i = 0, nr = 0;
	while (i < sizeof(x))
	{
		if (x % 2 == 0)
			nr++;
		x /= 2;
		i++;
	}
	cout << "Numarul de zerouri din reprezentarea binara a numarului citit este " << nr << "\n";
}

------------------------------



------------------------------

/* Lab6_Popa_Larisa-Ancuta_Prob_7

-se citesc de la tastatura 2 numere reale
-se realizeaza opera?iile de adunare, scadere, înmul?ire ?i împar?ire cu valorile date
-afiseaza rezultatele ob?inute
-sa se rotunjeasca valorile ob?inute la valori întregi, folosind operatorul cast ?i fara a folosi func?ii specifice
-sa se afi?eze apoi valoarea minima dintre numerele citite folosind operatorul condi?ional

Program C
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

float cit_nr(void); //citire numere reale

int main()
{
	float a, b;
	a = cit_nr();
	b = cit_nr();

	float adunare, scadere, inmultire, impartire;
	adunare = a + b;
	scadere = a - b;
	inmultire = a*b;
	impartire = a / b;

	printf("\nRezultatul adunarii celor doua numere este: %f \n", adunare);
	printf("Rezultatul scaderii celor doua numere este: %f \n", scadere);
	printf("Rezultatul inmultirii celor doua numere este: %f \n", inmultire);
	printf("Rezultatul impartirii celor doua numere este: %f \n", impartire);

	printf("\nRezultatul rotunjit al adunarii celor doua numere este: %d \n", (int)adunare);
	printf("Rezultatul rotunjit al scaderii celor doua numere este: %d \n", (int)scadere);
	printf("Rezultatul rotunjit al inmultirii celor doua numere este: %d \n", (int)inmultire);
	printf("Rezultatul rotunjit al impartirii celor doua numere este: %d \n", (int)impartire);

	printf("\nCel mai mic dintre cele doua numere este ");
	printf(a <= b ? "PRIMUL NUMAR\n" : "AL DOILEA NUMAR\n");

	return 0;
}

float cit_nr(void)
{
	float x;
	printf("Introduceti o valoare reala: ");
	scanf("%f", &x);
	return x;
}

------------------------------

/* Lab6_Popa_Larisa-Ancuta_Prob_8

-citi?i de la tastatura mai multe caractere reprezentând litere mici
-sa se transforme caracterele citite în litere mari în 2 moduri: 
         printr-o opera?ie aritmetica
		 folosind o opera?ie logica ?i o masca adecvata
Program C++
*/

#include <iostream>
#include <string.h>

using namespace std;

#define DIM 100

void transformare_1(char[DIM]); //transformare prin operatie aritmetica
void transformare_2(char[DIM]); //trandformare cu ajutorul unei functii

int main()
{
	char c1[DIM], c2[DIM];
	cout << "Cititi mai multe caractere(litere mici):";
	cin >> c1;
	transformare_1(c1);
	cout << endl;

	cout << "Cititi mai multe caractere(litere mici):";
	cin >> c2;
	transformare_2(c2);
	cout << endl;
}

void transformare_1(char c[100])
{
	int i;

	for (i = 0;i <= strlen(c)-1; i++)
	{
		if (c[i] >= 'a' && c[i] <= 'z')
			c[i] -= 32;
	}
	cout << "Transformare litere mici in litere mari printr-o operatie aritmetica: " << c <<"\n";
}

void transformare_2(char c[100])
{
	int i;
	for (i = 0;i < strlen(c); i++)
	{
		if(islower(c[i]))
			c[i] = toupper(c[i]);
	}
	cout << "Transformare litere mici in litere mari cu ajutorul unei funcii:  " << c << "\n";
}

------------------------------

/* Lab6_Popa_Larisa-Ancuta_Prob_9

-citi?i de la tastatura 2 numere întregi
-daca sunt egale, determina?i aria cercului cu raza egala cu valoarea citita
-daca sunt diferite calcula?i aria dreptunghiului cu laturile egale cu valorile date
-afi?a?i aria calculata specificând forma geometrica pentru care s-a facut calculul

Program C
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>

int cit_nr(void); //citeste numar intreg
float aria_cerc(int x); //calculeaza aria cercului
int aria_dreptunghi(int x, int y); //calculeaza aria dreptunghiului

int main()
{
	int a, b;
	a = cit_nr();
	b = cit_nr();

	int A_dr;
	float A_cerc;

	if (a == b)
	{
		A_cerc = aria_cerc(a);
		printf("Aria CERCULUI este egala cu: %f\n", A_cerc);
	}

	else
	{
		A_dr = aria_dreptunghi(a, b);
		printf("Aria DREPTUNGIULUI este egala cu %d\n", A_dr);
	}
}

int cit_nr(void)
{
	int x;
	printf("Introduceti o valoare intreaga: ");
	scanf("%d", &x);
	return x;
}

float aria_cerc(int x)
{
	float PI = 3.14159;
	return PI*(float)pow(x, 2);
}

int aria_dreptunghi(int x,int y)
{
	return x*y;
}